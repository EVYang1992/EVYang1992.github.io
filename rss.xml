<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Eagle</title>
    <link>https://evyang1992.github.io/</link>
    <atom:link href="/rss.xml" rel="self" type="application/rss+xml"/>
    
    <description></description>
    <pubDate>Wed, 07 Mar 2018 22:44:42 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>使用 OpenCV 进行摄像机标定完整教程</title>
      <link>https://evyang1992.github.io/2018/03/07/%E4%BD%BF%E7%94%A8-OpenCV-%E8%BF%9B%E8%A1%8C%E6%91%84%E5%83%8F%E6%9C%BA%E6%A0%87%E5%AE%9A%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/</link>
      <guid>https://evyang1992.github.io/2018/03/07/%E4%BD%BF%E7%94%A8-OpenCV-%E8%BF%9B%E8%A1%8C%E6%91%84%E5%83%8F%E6%9C%BA%E6%A0%87%E5%AE%9A%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/</guid>
      <pubDate>Wed, 07 Mar 2018 20:07:49 GMT</pubDate>
      <description>
      
        这是一份完整的利用 OpenCV 进行摄像机标定的教程，标定的原理，代码的解释，代码进行了验证。
      
      </description>
      
      <content:encoded><![CDATA[<p class="description"></p><a id="more"></a><h2 id="图片去畸变原理"><a href="#图片去畸变原理" class="headerlink" title="图片去畸变原理"></a>图片去畸变原理</h2><ul><li>扭曲可以用下面的来解决：  </li></ul><p>$$x_{corrected}=x(1+k_1r^2+k_2r^4+k<em>3r^6)$$  $$y</em>{corrected}=y(1+k_1r^2+k_2r^4+k<em>3r^6)$$<br>类似的，另一个切向畸变是因为成像的光线不是完全平行的到达镜像平面。所以有些区域比期望的要看上去离的近。可以用下面的方式解决：<br>$$x</em>{corrected}=x+[2p_1xy+p<em>2(r^2+2x^2)]$$  $$y</em>{corrected}=y+[p_1(r^2+2y^2)+2p_2xy]$$<br>按照上述原理，我们要找到上面公式里的 5 个参数，这 5 个参数就是我们说的畸变参数：<br>$$Distortion coefficients=(k_1,k_2,p_1,p_2,k_3)$$<br>除此之外，我们需要找到更多的信息，比如摄像头的内部和外部参数，内部参数是摄像头特定的参数。包括焦距 $(fx, fy)$ 。光学中心 $(cx, cy)$ 。也叫摄像机矩阵。它只依赖摄像头本身。一旦算出来就可以保存下来为以后使用，它应该是一个 3x3 的矩阵：<br>$$camera matrix=\begin{bmatrix}f_x &amp; 0 &amp; c_x \<br>                               0 &amp; f_y &amp; c_y \<br>                               0 &amp; 0 &amp; 1\end{bmatrix}$$<br>具体原理请参照： <a href="https://docs.opencv.org/2.4/modules/calib3d/doc/camera_calibration_and_3d_reconstruction.html" target="_blank" rel="noopener">Camera Calibration and 3D Reconstruction</a>  </p><p>因此为了图片去畸变，相机标定的主要内容就是获取 畸变矩阵 和 摄像机矩阵 。  </p><h2 id="标定实验准备"><a href="#标定实验准备" class="headerlink" title="标定实验准备"></a>标定实验准备</h2><ul><li>到<a href="https://github.com/makelove/OpenCV-Python-Tutorial/blob/master/ch42-%E6%91%84%E5%83%8F%E6%9C%BA%E6%A0%87%E5%AE%9A/camera-calibration-checker-board_9x7.pdf" target="_blank" rel="noopener">这里</a> 下载棋盘表格，注意这张图片尺寸是 9x6 的，而不是 9x7 ，也就是这里的宽度和高度是指内部交叉点的个数，而不是方形格的个数。务必填写正确，否则无法标定。  </li><li>用待标定相机从不同角度拍摄至少 10 张 棋盘表格照片  </li></ul><h2 id="标定用代码"><a href="#标定用代码" class="headerlink" title="标定用代码"></a>标定用代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> glob</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">calibrate_camera</span><span class="params">()</span>:</span></span><br><span class="line">    criteria = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, <span class="number">30</span>,</span><br><span class="line">                <span class="number">0.001</span>)  <span class="comment"># 阈值</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    criteria: 这是迭代终止准则。当满足这个准则时，算法迭代停止。实际上，它应该是一个3个参数的元组。他们是：(type, max_iter, epsilon):</span></span><br><span class="line"><span class="string">           ·3.a - 终止准则的类型： 有3个标志如下：</span></span><br><span class="line"><span class="string">               cv2.TERM_CRITERIA_EPS - 如果满足了指定准确度，epsilon就停止算法迭代。</span></span><br><span class="line"><span class="string">               cv2.TERM_CRITERIA_MAX_ITER - 在指定次数的迭代后就停止算法。</span></span><br><span class="line"><span class="string">                cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER - 当任何上面的条件满足就停止迭代</span></span><br><span class="line"><span class="string">           ·3.b - max_iter - 指定最大的迭代次数，整数</span></span><br><span class="line"><span class="string">           ·3.c - epsilon - 需要的准确度</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    <span class="comment"># 棋盘格模板规格</span></span><br><span class="line">    w = <span class="number">9</span></span><br><span class="line">    h = <span class="number">6</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 世界坐标系中的棋盘格点,例如(0,0,0), (1,0,0), (2,0,0) ....,(8,5,0)</span></span><br><span class="line">    objp = np.zeros((w * h, <span class="number">3</span>), np.float32)</span><br><span class="line">    objp[:, :<span class="number">2</span>] = np.mgrid[<span class="number">0</span>:w, <span class="number">0</span>:h].T.reshape(<span class="number">-1</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 储存棋盘格角点的世界坐标和图像坐标对</span></span><br><span class="line">    objpoints = []  <span class="comment"># 在世界坐标系中的三维点</span></span><br><span class="line">    imgpoints = []  <span class="comment"># 在图像平面的二维点</span></span><br><span class="line"></span><br><span class="line">    images = glob.glob(<span class="string">'camera_cal/*.jpg'</span>)</span><br><span class="line">    <span class="keyword">for</span> fname <span class="keyword">in</span> images:</span><br><span class="line">        img = cv2.imread(fname)</span><br><span class="line">        gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)</span><br><span class="line">        <span class="comment"># 找到棋盘格角点</span></span><br><span class="line">        ret, corners = cv2.findChessboardCorners(gray, (w, h), <span class="keyword">None</span>)</span><br><span class="line">        <span class="keyword">if</span> ret == <span class="keyword">True</span>:</span><br><span class="line">            <span class="comment"># cv2.cornerSubPix(image, corners, winSize, zeroZone, criteria) 用来精细化找到的角点</span></span><br><span class="line">            <span class="comment"># winSize：每一个角点的搜寻范围，实际搜寻范围：(winSize*2+1, winSize*2+1)</span></span><br><span class="line">            <span class="comment"># zeroZone：搜索区域中间的dead region边长的一半，有时用于避免自相关矩阵的奇异性。如果值设为(-1,-1) 则表示没有这个区域。</span></span><br><span class="line">            <span class="comment"># criteria：角点精准化迭代过程的终止条件。也就是当迭代次数超过criteria.maxCount，或者角点位置变化小于criteria.epsilon时，停止迭代过程。</span></span><br><span class="line">            cv2.cornerSubPix(gray, corners, (<span class="number">11</span>, <span class="number">11</span>), (<span class="number">-1</span>, <span class="number">-1</span>), criteria)</span><br><span class="line">            objpoints.append(objp)</span><br><span class="line">            imgpoints.append(corners)</span><br><span class="line">            <span class="comment"># 将角点在图像上显示</span></span><br><span class="line">            cv2.drawChessboardCorners(img, (w, h), corners, ret)</span><br><span class="line">            cv2.imshow(<span class="string">'findCorners'</span>, img)</span><br><span class="line">            cv2.waitKey(<span class="number">1</span>)</span><br><span class="line">    cv2.destroyAllWindows()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 标定</span></span><br><span class="line">    print(type(img))</span><br><span class="line">    img_size = (img.shape[<span class="number">1</span>], img.shape[<span class="number">0</span>])</span><br><span class="line">    ret, mtx, dist, rvecs, tvecs = cv2.calibrateCamera(objpoints, imgpoints,</span><br><span class="line">                                                       img_size, <span class="keyword">None</span>, <span class="keyword">None</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> mtx, dist</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">if __name__ == '__main__':</span></span><br><span class="line"><span class="string">    mtx, dist = calibrate_camera()</span></span><br><span class="line"><span class="string">    save_dict = &#123;'mtx': mtx, 'dist': dist&#125;</span></span><br><span class="line"><span class="string">    with open('calibrate_camera.p', 'wb') as f:</span></span><br><span class="line"><span class="string">        pickle.dump(save_dict, f)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    img2 = cv2.imread('a.jpg')</span></span><br><span class="line"><span class="string">    dst = cv2.undistort(img2, mtx, dist, None, mtx)</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    # cv2.undistort(src, cameraMatrix, distCoeffs[, dst[, newCameraMatrix]]) 矫正图片函数</span></span><br><span class="line"><span class="string">    #     src：要矫正图片</span></span><br><span class="line"><span class="string">    #     cameraMatrix：相机矩阵  </span></span><br><span class="line"><span class="string">    #     distCoeffs：畸变矩阵</span></span><br><span class="line"><span class="string">    #     dst：如果设置为 None ， 表示输出图片大小与输入图片尺寸一致</span></span><br><span class="line"><span class="string">    #     newCameraMatrix：输出图片的相机矩阵是否改变，一般设置为和 cameraMatrix 相同。  </span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    cv2.imwrite('calibresult12.png', dst)</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><hr>]]></content:encoded>
      
      <comments>https://evyang1992.github.io/2018/03/07/%E4%BD%BF%E7%94%A8-OpenCV-%E8%BF%9B%E8%A1%8C%E6%91%84%E5%83%8F%E6%9C%BA%E6%A0%87%E5%AE%9A%E5%AE%8C%E6%95%B4%E6%95%99%E7%A8%8B/#disqus_thread</comments>
    </item>
    
    <item>
      <title>深度学习--每日一篇论文阅读系列目录</title>
      <link>https://evyang1992.github.io/2018/01/27/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0-%E6%AF%8F%E6%97%A5%E4%B8%80%E7%AF%87%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%E7%B3%BB%E5%88%97%E7%9B%AE%E5%BD%95/</link>
      <guid>https://evyang1992.github.io/2018/01/27/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0-%E6%AF%8F%E6%97%A5%E4%B8%80%E7%AF%87%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%E7%B3%BB%E5%88%97%E7%9B%AE%E5%BD%95/</guid>
      <pubDate>Sat, 27 Jan 2018 20:36:42 GMT</pubDate>
      <description>
      
        &lt;p class=&quot;description&quot;&gt;&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p class="description"></p><a id="more"></a><p>##</p><p>##</p><p>##</p><hr>]]></content:encoded>
      
      <comments>https://evyang1992.github.io/2018/01/27/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0-%E6%AF%8F%E6%97%A5%E4%B8%80%E7%AF%87%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%E7%B3%BB%E5%88%97%E7%9B%AE%E5%BD%95/#disqus_thread</comments>
    </item>
    
    <item>
      <title>python random 使用</title>
      <link>https://evyang1992.github.io/2018/01/21/python-random-%E4%BD%BF%E7%94%A8/</link>
      <guid>https://evyang1992.github.io/2018/01/21/python-random-%E4%BD%BF%E7%94%A8/</guid>
      <pubDate>Sun, 21 Jan 2018 14:18:58 GMT</pubDate>
      <description>
      
        python 生成随机数模块random 常用方法总结。
      
      </description>
      
      <content:encoded><![CDATA[<p class="description"></p><a id="more"></a><h2 id="random-random"><a href="#random-random" class="headerlink" title="random.random()"></a>random.random()</h2><p>用来随机生成一个0到1之间的浮点数，包括零。<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">1</span>]: <span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">In [<span class="number">2</span>]: random.random()</span><br><span class="line">Out[<span class="number">2</span>]: <span class="number">0.15790797219589303</span></span><br></pre></td></tr></table></figure></p><h2 id="randint-a-b"><a href="#randint-a-b" class="headerlink" title="randint(a, b)"></a>randint(a, b)</h2><p>用来生成[a,b]之间的随意整数，包括两个边界值。<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">12</span>]: <span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">In [<span class="number">13</span>]: random.randint(<span class="number">1</span>,<span class="number">6</span>)</span><br><span class="line">Out[<span class="number">13</span>]: <span class="number">1</span></span><br></pre></td></tr></table></figure></p><h2 id="random-uniform-a-b"><a href="#random-uniform-a-b" class="headerlink" title="random.uniform(a,b)"></a>random.uniform(a,b)</h2><p>用来生成[a,b]之间的随意浮点数，包括两个边界值。<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">14</span>]: <span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">In [<span class="number">15</span>]: random.uniform(<span class="number">1</span>,<span class="number">6</span>)</span><br><span class="line">Out[<span class="number">15</span>]: <span class="number">5.497873150216069</span></span><br></pre></td></tr></table></figure></p><h2 id="choice-seq"><a href="#choice-seq" class="headerlink" title="choice(seq)"></a>choice(seq)</h2><p>从一个非空序列选出随机一个元素。seq泛指list，tuple，字符串等<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">16</span>]: <span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">In [<span class="number">17</span>]: List = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line">In [<span class="number">18</span>]: random.choice(List)</span><br><span class="line">Out[<span class="number">18</span>]: <span class="number">1</span></span><br></pre></td></tr></table></figure></p><h2 id="randrange-start-stop-step-1"><a href="#randrange-start-stop-step-1" class="headerlink" title="randrange(start, stop[, step = 1])"></a>randrange(start, stop[, step = 1])</h2><p>这个就是random和range函数的合二为一了。但注意，range用法有变。<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">27</span>]: <span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">In [<span class="number">28</span>]: random.randrange(<span class="number">1</span>,<span class="number">6</span>)</span><br><span class="line">Out[<span class="number">28</span>]: <span class="number">3</span></span><br></pre></td></tr></table></figure></p><h2 id="random-shuffle-x-random"><a href="#random-shuffle-x-random" class="headerlink" title="random.shuffle(x[,random])"></a>random.shuffle(x[,random])</h2><p>正如函数名所表示的意思，shuffle，洗牌，将一个列表中的元素打乱。<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">36</span>]: <span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">In [<span class="number">37</span>]: List = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line">In [<span class="number">38</span>]: random.shuffle(List)</span><br><span class="line">In [<span class="number">39</span>]: print(List)</span><br><span class="line">[<span class="number">2</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">3</span>]</span><br></pre></td></tr></table></figure></p><h2 id="random-sample-sequence-k"><a href="#random-sample-sequence-k" class="headerlink" title="random.sample(sequence,k)"></a>random.sample(sequence,k)</h2><p>sample，样品，从有序列表中选k个作为一个片段返回。<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">41</span>]: <span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">In [<span class="number">42</span>]: List = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line">In [<span class="number">43</span>]: random.sample(List,<span class="number">3</span>)</span><br><span class="line">Out[<span class="number">43</span>]: [<span class="number">4</span>, <span class="number">6</span>, <span class="number">3</span>]</span><br></pre></td></tr></table></figure></p><h2 id="random-seed-x"><a href="#random-seed-x" class="headerlink" title="random.seed ( [x] )"></a>random.seed ( [x] )</h2><p>x:改变随机数生成器的种子seed。如果你不了解其原理，你不必特别去设定seed，Python会帮你选择seed。使用同一个种子，每次生成的随机数序列都是相同的。<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">48</span>]: <span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">In [<span class="number">49</span>]: random.seed(<span class="number">10</span>)</span><br><span class="line">In [<span class="number">50</span>]: print(<span class="string">"Random number with seed 10: "</span>, random.random())</span><br><span class="line">Random number <span class="keyword">with</span> seed <span class="number">10</span>:  <span class="number">0.5714025946899135</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">51</span>]: random.seed(<span class="number">10</span>)</span><br><span class="line">In [<span class="number">52</span>]: print(<span class="string">"Random number with seed 10: "</span>, random.random())</span><br><span class="line">Random number <span class="keyword">with</span> seed <span class="number">10</span>:  <span class="number">0.5714025946899135</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">53</span>]: random.seed(<span class="number">10</span>)</span><br><span class="line">In [<span class="number">54</span>]: print(<span class="string">"Random number with seed 10: "</span>, random.random())</span><br><span class="line">Random number <span class="keyword">with</span> seed <span class="number">10</span>:  <span class="number">0.5714025946899135</span></span><br></pre></td></tr></table></figure></p><p>关于随机数种子，请参考：<a href="http://www.cnblogs.com/lzxwalex/p/6880748.html" target="_blank" rel="noopener">Python下探究随机数的产生原理和算法</a></p><hr>]]></content:encoded>
      
      <comments>https://evyang1992.github.io/2018/01/21/python-random-%E4%BD%BF%E7%94%A8/#disqus_thread</comments>
    </item>
    
    <item>
      <title>深度神经网络中一些基本概念</title>
      <link>https://evyang1992.github.io/2018/01/20/%E6%B7%B1%E5%BA%A6%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E4%B8%AD%E4%B8%80%E4%BA%9B%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/</link>
      <guid>https://evyang1992.github.io/2018/01/20/%E6%B7%B1%E5%BA%A6%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E4%B8%AD%E4%B8%80%E4%BA%9B%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/</guid>
      <pubDate>Sat, 20 Jan 2018 10:56:00 GMT</pubDate>
      <description>
      
        深度神经网络中的一些基本概念：Epoch,Number of Batch,Batch Size,Iteration
      
      </description>
      
      <content:encoded><![CDATA[<p class="description"></p><a id="more"></a><h2 id="Set-1"><a href="#Set-1" class="headerlink" title="Set 1"></a>Set 1</h2><ul><li><strong>Epoch</strong>: 当一个完整的数据集通过了神经网络一次并且返回了一次，这个过程称为一个 epoch。</li><li><strong>Number of Batch</strong>：一个完整数据集分成了多少批次进入神经网络进行训练，批次的数量叫做Number of Batch。</li><li><strong>Batch Size</strong>:  每一个批次数据的个数称之为Batch Size。</li><li><strong>Iteration</strong>: batch 需要完成一个 epoch 的次数。记住：在一个epoch 中，batch 数和迭代数是相等的。比如对于一个有 2000 个训练样本的数据集。将 2000 个样本分成大小为 500 的 batch，那么完成一个 epoch 需要 4 个Iteration。</li></ul><p><strong>待补充···</strong></p><hr>]]></content:encoded>
      
      <comments>https://evyang1992.github.io/2018/01/20/%E6%B7%B1%E5%BA%A6%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E4%B8%AD%E4%B8%80%E4%BA%9B%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Python argparse 命令行与参数解析</title>
      <link>https://evyang1992.github.io/2018/01/17/Python-argparse-%E5%91%BD%E4%BB%A4%E8%A1%8C%E4%B8%8E%E5%8F%82%E6%95%B0%E8%A7%A3%E6%9E%90/</link>
      <guid>https://evyang1992.github.io/2018/01/17/Python-argparse-%E5%91%BD%E4%BB%A4%E8%A1%8C%E4%B8%8E%E5%8F%82%E6%95%B0%E8%A7%A3%E6%9E%90/</guid>
      <pubDate>Wed, 17 Jan 2018 21:03:35 GMT</pubDate>
      <description>
      
        Python 命令行与参数解析方法有很多工具，本文使用python 自带的argparse 来说明python 如何进行命令行解析。
      
      </description>
      
      <content:encoded><![CDATA[<p class="description"></p><a id="more"></a><h2 id="什么是命令行与参数解析？"><a href="#什么是命令行与参数解析？" class="headerlink" title="什么是命令行与参数解析？"></a>什么是命令行与参数解析？</h2><p>通俗来说，命令行与参数解析就是当你输入cmd 打开dos 交互界面时候，启动程序要进行的参数给定。比如在dos 界面输入：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python openPythonFile.py <span class="string">"a"</span> -b <span class="string">"number"</span></span><br></pre></td></tr></table></figure></p><p>其中的”a”， -b 等就是命令行与参数解析要做的事。<br><del><em>这在windows 系统下用处不是特别大，因为windows 下各种编译器，你根本不需要在dos 界面下去执行python 脚本。但是在linux 系统下，你几乎要总是考虑命令行解析。</em></del><br>和操作系统无关，就是设计程序在运行时必须给定某些额外参数才能运行，也就是如果设置了命令行参数解析，那么各种编译器按F5 是无法直接运行程序的。用途，就是不能随便就能运行脚本，可以达到一定程度上的安全功能。  </p><h2 id="Python-命令行与参数解析使用步骤"><a href="#Python-命令行与参数解析使用步骤" class="headerlink" title="Python 命令行与参数解析使用步骤"></a>Python 命令行与参数解析使用步骤</h2><ul><li>创建解析  </li><li>添加参数  </li><li>解析参数  </li></ul><p>下面通过一个例子进行简单创建：<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"><span class="comment"># 创建解析步骤</span></span><br><span class="line">parser = argparse.ArgumentParser(description=<span class="string">'Process some integers.'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加参数步骤</span></span><br><span class="line">parser.add_argument(<span class="string">'integers'</span>, metavar=<span class="string">'N'</span>, type=int, nargs=<span class="string">'+'</span>,</span><br><span class="line">                   help=<span class="string">'an integer for the accumulator'</span>)</span><br><span class="line">parser.add_argument(<span class="string">'--sum'</span>, dest=<span class="string">'accumulate'</span>, action=<span class="string">'store_const'</span>,</span><br><span class="line">                   const=sum, default=max,</span><br><span class="line">                   help=<span class="string">'sum the integers'</span>)</span><br><span class="line"><span class="comment"># 解析参数步骤  </span></span><br><span class="line">args = parser.parse_args()</span><br><span class="line">print(args.accumulate(args.integers))</span><br></pre></td></tr></table></figure></p><p>在dos 界面执行：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python 命令行与参数解析.py -h</span><br></pre></td></tr></table></figure></p><p>运行结果：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">usage: 命令行与参数解析.py [-h] [--sum] N [N ...]</span><br><span class="line">Process some integers.</span><br><span class="line">positional arguments:</span><br><span class="line">  N           an <span class="built_in">integer</span> <span class="keyword">for</span> the accumulator</span><br><span class="line">optional arguments:</span><br><span class="line">  -h, --<span class="built_in">help</span>  show this <span class="built_in">help</span> message and <span class="built_in">exit</span></span><br><span class="line">  --sum       sum the integers</span><br></pre></td></tr></table></figure></p><h2 id="每个步骤的参数设定"><a href="#每个步骤的参数设定" class="headerlink" title="每个步骤的参数设定"></a>每个步骤的参数设定</h2><h3 id="创建解析过程参数设定"><a href="#创建解析过程参数设定" class="headerlink" title="创建解析过程参数设定"></a>创建解析过程参数设定</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ArgumentParser(prog='', usage=None, description='Process some integers.', version=None, formatter_class=&lt;class 'argparse.HelpFormatter'&gt;, conflict_handler='error', add_help=True)</span><br><span class="line"><span class="comment"># 例如</span></span><br><span class="line">parser = argparse.ArgumentParser(description=<span class="string">'Process some integers.'</span>)</span><br></pre></td></tr></table></figure><ul><li><p><strong>prog（不建议更改）</strong><br>程序名称(默认sys.argv[0]，默认为函数文件名)，设置prog 则改变这一默认（仍使用上面那个实例）：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 变更参数</span></span><br><span class="line">parser = argparse.ArgumentParser(prog=<span class="string">'sum or max'</span>,description=<span class="string">'Process some integers.'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#运行结果</span></span><br><span class="line"><span class="comment">#原始</span></span><br><span class="line">usage: 命令行与参数解析.py [-h] [--sum] N [N ...]</span><br><span class="line"><span class="comment">#变更后</span></span><br><span class="line">usage: sum <span class="keyword">or</span> max [-h] [--sum] N [N ...]</span><br></pre></td></tr></table></figure></li><li><p><strong>usage（不建议更改）</strong><br>用于描述程序的使用用法（默认为添加到解析器中的参数）。在使用<code>python xxx.py -h</code>之后将出现。看例子：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 变更参数</span></span><br><span class="line">parser = argparse.ArgumentParser(usage=<span class="string">'python 命令行与参数解析.py arguments'</span>,description=<span class="string">'Process some integers.'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#运行结果</span></span><br><span class="line"><span class="comment">#原始</span></span><br><span class="line">usage: 命令行与参数解析.py [-h] [--sum] N [N ...]</span><br><span class="line"><span class="comment">#变更后</span></span><br><span class="line">usage: python 命令行与参数解析.py arguments</span><br></pre></td></tr></table></figure></li><li><p><strong>description</strong><br>描述文件，上面实例已体现。</p></li><li><p><strong>epilog</strong><br>参数选项帮助后的显示文本。看例子：  </p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 变更参数</span></span><br><span class="line">epilog=<span class="string">'And What can I help U?'</span></span><br><span class="line"><span class="comment"># 运行结果</span></span><br><span class="line">optional arguments:</span><br><span class="line">  -h, --help  show this help message <span class="keyword">and</span> exit</span><br><span class="line">  --sum       sum the intergers</span><br><span class="line">And What can I help U?</span><br></pre></td></tr></table></figure></li><li><p><strong>parents</strong><br>共享同一个父类解析器，由ArgumentParser对象组成的列表，它们的arguments选项会被包含到新ArgumentParser对象中，类似于继承。</p></li><li><p><strong>formatter_class（没必要改变）</strong><br>help信息输出格式共有三种形式：</p><ol><li>argparse.RawDescriptionHelpFormatter：以输入格式输出，并不将其合并为一行</li><li>argparse.RawTextHelpFormatter：所有信息以输入格式输出，并不将其合并为一行</li><li>argparse.ArgumentDefaultsHelpFormatter：输出参数的defalut值</li></ol></li><li><p><strong>prefix_chars（不建议改变）</strong><br>参数前缀，默认为’-‘。前缀字符，放在文件名之前。当参数过多时，可以将参数放在文件中读取。看例子：  </p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">with</span> open(<span class="string">'args.txt'</span>, <span class="string">'w'</span>) <span class="keyword">as</span> fp:</span><br><span class="line"><span class="meta">... </span>   fp.write(<span class="string">'-f\nbar'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>parser = argparse.ArgumentParser(fromfile_prefix_chars=<span class="string">'@'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>parser.add_argument(<span class="string">'-f'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>parser.parse_args([<span class="string">'-f'</span>, <span class="string">'tmp'</span>, <span class="string">'@args.txt'</span>])</span><br><span class="line">Namespace(f=<span class="string">'bar'</span>)</span><br></pre></td></tr></table></figure></li></ul><p>例子中parser.parse_args([‘-f’, ‘foo’, ‘@args.txt’])解析时会从文件args.txt 读取，相当于 [‘-f’, ‘foo’, ‘-f’, ‘bar’]  </p><ul><li><p><strong>conflict_handler(最好不要修改)</strong><br>解决冲突的策略，默认情况下冲突会发生错误。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>parser = argparse.ArgumentParser(prog=<span class="string">'PROG'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>parser.add_argument(<span class="string">'-f'</span>, <span class="string">'--foo'</span>, help=<span class="string">'old foo help'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>parser.add_argument(<span class="string">'--foo'</span>, help=<span class="string">'new foo help'</span>)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line"> ..</span><br><span class="line">ArgumentError: argument --foo: conflicting option string(s): --foo</span><br></pre></td></tr></table></figure></li><li><p><strong>add_help（不建议修改）</strong><br>是否增加-h/-help选项 (默认为True)，一般help信息都是必须的。设为False时，help信息里面不再显示-h –help信息。  </p></li><li><p><strong>argument_default</strong><br>设置一个全局的选项的缺省值，一般每个选项单独设置，基本没用。缺省为：None。</p></li></ul><h3 id="添加参数过程参数设定"><a href="#添加参数过程参数设定" class="headerlink" title="添加参数过程参数设定"></a>添加参数过程参数设定</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ArgumentParser.add_argument(name <span class="keyword">or</span> flags...[, action][, nargs][, const][, default][, type][, choices][, required][, help][, metavar][, dest])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 例如</span></span><br><span class="line">parser.add_argument(<span class="string">'intergers'</span>,metavar=<span class="string">'N'</span>,type=int,nargs=<span class="string">'+'</span>,help=<span class="string">'an interger for the accumulator'</span>)</span><br><span class="line">parser.add_argument(<span class="string">'--sum'</span>,dest=<span class="string">'accumulate'</span>,action=<span class="string">'store_const'</span>,const=sum,default=max,help=<span class="string">'sum the intergers (default:find the max)'</span>)</span><br></pre></td></tr></table></figure><p>知识点：</p><ul><li>每一个参数都要单独设置，就像上面例子，需要两个参数就用两个<em>add_argument</em> 。</li><li>从上面的实例中也可以看到，参数分为两种：<em>positional arguments</em> 和<em>optional arguments</em> 。</li><li><em>positional arguments</em> 参数按照参数设置的先后顺序对应读取，实际中不用设置参数名，必须有序设计。</li><li><em>optional arguments</em> 参数在使用时必须使用参数名，然后是参数具体数值，设置可以是无序的。</li><li>程序根据<em>prefix_chars(默认”-“)</em>自动识别<em>positional arguments</em> 还是<em>optional arguments</em>。  </li><li><em>prefix_chars</em> 分为缩写(比如”-<em>h</em>“)和对应的全程(比如”–<em>help</em>“)，可以同时设置</li></ul><p>参数设定详细解释：  </p><ul><li><p><strong>name or flag</strong><br>optional arguments以’-‘为前缀的参数，其他的为positional arguments。上面例子已经有体现如何设定。</p></li><li><p><strong>action</strong><br>命令行参数的操作，操作的形式有以下几种：  </p><ol><li>store:仅仅存储参数的值（默认）</li><li><p>store_const:存储const关键字指定的值</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">parser.add_argument(<span class="string">'-t'</span>,action=<span class="string">'store_const'</span>,const=<span class="number">7</span>)</span><br></pre></td></tr></table></figure></li><li><p>store_true/store_false:值为True/False</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">parser.add_argument(<span class="string">'-t'</span>,action=<span class="string">'store_truet'</span>)</span><br></pre></td></tr></table></figure></li><li><p>append:值追加到list中（<strong>普通的store 和append 不是一样的？</strong>）</p></li><li>append_const: 存为列表，会根据const关键参数进行添加<figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>parser = argparse.ArgumentParser()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>parser.add_argument(<span class="string">'--str'</span>, dest=<span class="string">'types'</span>, action=<span class="string">'append_const'</span>, const=str)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>parser.add_argument(<span class="string">'--int'</span>, dest=<span class="string">'types'</span>, action=<span class="string">'append_const'</span>, const=int)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>parser.parse_args(<span class="string">'--str --int --str --int'</span>.split())</span><br><span class="line">Namespace(l=<span class="keyword">None</span>, types=[&lt;type <span class="string">'str'</span>&gt;, &lt;type <span class="string">'int'</span>&gt;, &lt;type <span class="string">'str'</span>&gt;, &lt;type <span class="string">'int'</span>&gt;])</span><br></pre></td></tr></table></figure></li></ol></li><li><p><strong>count</strong><br>统计参数出现的次数</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>parser = argparse.ArgumentParser()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>parser.add_argument(<span class="string">'--counte'</span>, <span class="string">'-c'</span>, action=<span class="string">'count'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>parser.parse_args(<span class="string">'-cccc'</span>.split())</span><br><span class="line">Namespace(counte=<span class="number">4</span>)</span><br></pre></td></tr></table></figure></li><li><p><strong>help</strong><br>显示help信息  </p></li><li><p><strong>version</strong><br>显示version信息  </p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>parser = argparse.ArgumentParser()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>parser.add_argument(<span class="string">'--version'</span>, action=<span class="string">'version'</span>, version=<span class="string">'version 2.0'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>parser.parse_args([<span class="string">'--version'</span>])</span><br><span class="line">version <span class="number">2.0</span></span><br><span class="line">```   </span><br><span class="line"></span><br><span class="line">+ **nrgs**  </span><br><span class="line">参数的数量，有如下几个设定：  </span><br><span class="line">  <span class="number">1.</span> N：N个参数</span><br><span class="line">  2. ?:首先从命令行中获取，若没有则从const中获取，仍然没有则从default中获取</span><br><span class="line">  <span class="number">3.</span> */+:任意多个参数</span><br><span class="line"></span><br><span class="line">+ **const** </span><br><span class="line">保存为一个常量，上面在讲**action** 行为时已经解释用法。  </span><br><span class="line"></span><br><span class="line">+ **default**  </span><br><span class="line">默认值</span><br><span class="line"></span><br><span class="line">+ **type**</span><br><span class="line">参数类型，默认为str</span><br><span class="line"></span><br><span class="line">+ **choices**  </span><br><span class="line">设置参数值的范围，如果choices中的类型不是字符串，记得指定type。看例子：  </span><br><span class="line">```py</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>parser = argparse.ArgumentParser()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>parser.add_argument(<span class="string">'x'</span>, type=int, choices=range(<span class="number">1</span>, <span class="number">4</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>parser.parse_args([<span class="string">'3'</span>])</span><br><span class="line">Namespace(x=<span class="number">3</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>parser.parse_args([<span class="string">'4'</span>])</span><br><span class="line">usage: [-h] &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;</span><br><span class="line">: error: argument x: invalid choice: <span class="number">4</span> (choose <span class="keyword">from</span> <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line">+ **required**  </span><br><span class="line">是否为必选参数，默认为<span class="keyword">True</span></span><br><span class="line"></span><br><span class="line">+ **desk**  </span><br><span class="line">参数别名，看例子：  </span><br><span class="line">```py</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>parser = argparse.ArgumentParser()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>parser.add_argument(<span class="string">'--foo'</span>, dest=<span class="string">'f_name'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>parser.parse_args(<span class="string">'--foo XXX'</span>.split())</span><br><span class="line">Namespace(f_name=<span class="string">'XXX'</span>)</span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line">+ **help**</span><br><span class="line">参数的帮助信息，即解释信息</span><br><span class="line"></span><br><span class="line">+ **metavar**  </span><br><span class="line">帮助信息中显示的参数名称</span><br><span class="line"></span><br><span class="line"><span class="comment">### 解析参数过程参数设定</span></span><br><span class="line">```py</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>parser = argparse.ArgumentParser()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>parser.add_argument(<span class="string">'x'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = parser.parse_args([<span class="string">'1'</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">Namespace(x=<span class="string">'1'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>type(a)</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">argparse</span>.<span class="title">Namespace</span>'&gt;</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">a</span>.<span class="title">x</span></span></span><br><span class="line"><span class="class">'1'</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="一个完整的例子"><a href="#一个完整的例子" class="headerlink" title="一个完整的例子"></a>一个完整的例子</h2><blockquote><p>filename = argv_argparse.py<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cmd</span><span class="params">()</span>:</span></span><br><span class="line">    args = argparse.ArgumentParser(description = <span class="string">'Personal Information '</span>,epilog = <span class="string">'Information end '</span>)</span><br><span class="line">    <span class="comment">#必写属性,第一位</span></span><br><span class="line">    args.add_argument(<span class="string">"name"</span>,         type = str,                  help = <span class="string">"Your name"</span>)</span><br><span class="line">    <span class="comment">#必写属性,第二位</span></span><br><span class="line">    args.add_argument(<span class="string">"birth"</span>,        type = str,                  help = <span class="string">"birthday"</span>)</span><br><span class="line">    <span class="comment">#可选属性,默认为None</span></span><br><span class="line">    args.add_argument(<span class="string">"-r"</span>,<span class="string">'--race'</span>,  type = str, dest = <span class="string">"race"</span>,   help = <span class="string">u"民族"</span>)</span><br><span class="line">    <span class="comment">#可选属性,默认为0,范围必须在0~150</span></span><br><span class="line">    args.add_argument(<span class="string">"-a"</span>, <span class="string">"--age"</span>,  type = int, dest = <span class="string">"age"</span>,    help = <span class="string">"Your age"</span>,         default = <span class="number">0</span>,      choices=range(<span class="number">150</span>))</span><br><span class="line">    <span class="comment">#可选属性,默认为male</span></span><br><span class="line">    args.add_argument(<span class="string">'-s'</span>,<span class="string">"--sex"</span>,   type = str, dest = <span class="string">"sex"</span>,    help = <span class="string">'Your sex'</span>,         default = <span class="string">'male'</span>, choices=[<span class="string">'male'</span>, <span class="string">'female'</span>])</span><br><span class="line">    <span class="comment">#可选属性,默认为None,-p后可接多个参数</span></span><br><span class="line">    args.add_argument(<span class="string">"-p"</span>,<span class="string">"--parent"</span>,type = str, dest = <span class="string">'parent'</span>, help = <span class="string">"Your parent"</span>,      default = <span class="string">"None"</span>, nargs = <span class="string">'*'</span>)</span><br><span class="line">    <span class="comment">#可选属性,默认为None,-o后可接多个参数</span></span><br><span class="line">    args.add_argument(<span class="string">"-o"</span>,<span class="string">"--other"</span>, type = str, dest = <span class="string">'other'</span>,  help = <span class="string">"other Information"</span>,required = <span class="keyword">False</span>,nargs = <span class="string">'*'</span>)</span><br><span class="line"></span><br><span class="line">    args = args.parse_args()<span class="comment">#返回一个命名空间,如果想要使用变量,可用args.attr</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">"argparse.args="</span>,args,type(args)</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'name = %s'</span>%args.name</span><br><span class="line">    d = args.__dict__</span><br><span class="line">    <span class="keyword">for</span> key,value <span class="keyword">in</span> d.iteritems():</span><br><span class="line">        <span class="keyword">print</span> <span class="string">'%s = %s'</span>%(key,value)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">"__main__"</span>:</span><br><span class="line">    cmd()</span><br></pre></td></tr></table></figure></p></blockquote><p>dos输入命令示例:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">python argv_argparse.py -h</span><br><span class="line">python argv_argparse.py xiaoming 1991.11.11</span><br><span class="line">python argv_argparse.py xiaoming 1991.11.11 -p xiaohong xiaohei -a 25 -r han -s female -o 1 2 3 4 5 6</span><br></pre></td></tr></table></figure></p><hr>]]></content:encoded>
      
      <comments>https://evyang1992.github.io/2018/01/17/Python-argparse-%E5%91%BD%E4%BB%A4%E8%A1%8C%E4%B8%8E%E5%8F%82%E6%95%B0%E8%A7%A3%E6%9E%90/#disqus_thread</comments>
    </item>
    
    <item>
      <title>图像数据预处理</title>
      <link>https://evyang1992.github.io/2018/01/16/%E5%9B%BE%E5%83%8F%E6%95%B0%E6%8D%AE%E9%A2%84%E5%A4%84%E7%90%86/</link>
      <guid>https://evyang1992.github.io/2018/01/16/%E5%9B%BE%E5%83%8F%E6%95%B0%E6%8D%AE%E9%A2%84%E5%A4%84%E7%90%86/</guid>
      <pubDate>Tue, 16 Jan 2018 22:29:44 GMT</pubDate>
      <description>
      
        &lt;p class=&quot;description&quot;&gt;&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p class="description"></p><a id="more"></a><p>##</p><p>##</p><p>##</p><hr>]]></content:encoded>
      
      <comments>https://evyang1992.github.io/2018/01/16/%E5%9B%BE%E5%83%8F%E6%95%B0%E6%8D%AE%E9%A2%84%E5%A4%84%E7%90%86/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Hexo 创建指南</title>
      <link>https://evyang1992.github.io/2018/01/15/Hexo-%E5%88%9B%E5%BB%BA%E6%8C%87%E5%8D%97/</link>
      <guid>https://evyang1992.github.io/2018/01/15/Hexo-%E5%88%9B%E5%BB%BA%E6%8C%87%E5%8D%97/</guid>
      <pubDate>Mon, 15 Jan 2018 15:59:46 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;基本环境部署&quot;&gt;&lt;a href=&quot;#基本环境部署&quot; class=&quot;headerlink&quot; title=&quot;基本环境部署&quot;&gt;&lt;/a&gt;基本环境部署&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://xuanwo.org/2015/03/26/hexo-into
        
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="基本环境部署"><a href="#基本环境部署" class="headerlink" title="基本环境部署"></a>基本环境部署</h2><ul><li><a href="https://xuanwo.org/2015/03/26/hexo-intor/" target="_blank" rel="noopener">史上最详细的Hexo博客搭建图文教程</a>  </li></ul><h2 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h2><ul><li><a href="https://hexo.io/zh-cn/docs/index.html" target="_blank" rel="noopener">官方配置文档</a>  </li><li><a href="http://theme-next.iissnan.com/theme-settings.html" target="_blank" rel="noopener">Next 配置文档</a>   </li></ul><h2 id="数学公式使用"><a href="#数学公式使用" class="headerlink" title="数学公式使用"></a>数学公式使用</h2><ul><li>参考方法1： <a href="http://cn.clanzd.com/mathjax-for-hexo.html" target="_blank" rel="noopener">在 Hexo 中完美使用 Mathjax 输出数学公式</a>  </li><li>实际使用方法：<br>在主题配置文件中设置：  <figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># MathJax Support</span></span><br><span class="line"><span class="attr">mathjax:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  per_page:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  cdn:</span> <span class="string">//cdn.bootcss.com/mathjax/2.7.1/latest.js?config=TeX-AMS-MML_HTMLorMML</span></span><br></pre></td></tr></table></figure></li></ul><p>在hexo 配置文件添加：<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">math:</span></span><br><span class="line"><span class="attr">  engine:</span> <span class="string">'mathjax'</span> <span class="comment"># or 'katex'</span></span><br><span class="line"><span class="attr">  mathjax:</span></span><br><span class="line"><span class="attr">    src:</span> <span class="string">custom_mathjax_source</span></span><br><span class="line"><span class="attr">    config:</span></span><br><span class="line">      <span class="comment"># MathJax config</span></span><br><span class="line"><span class="attr">  katex:</span></span><br><span class="line"><span class="attr">    css:</span> <span class="string">custom_css_source</span></span><br><span class="line"><span class="attr">    js:</span> <span class="string">custom_js_source</span> <span class="comment"># not used</span></span><br><span class="line"><span class="attr">    config:</span></span><br><span class="line">      <span class="comment"># KaTeX config</span></span><br></pre></td></tr></table></figure></p><h2 id="上传图片"><a href="#上传图片" class="headerlink" title="上传图片"></a>上传图片</h2><ul><li>请参考： <a href="https://www.jianshu.com/p/c2ba9533088a" target="_blank" rel="noopener">上传图片</a></li></ul><h2 id="添加RSS"><a href="#添加RSS" class="headerlink" title="添加RSS"></a>添加RSS</h2><ul><li>请参考：<a href="http://swift.diagon.me/Hexo-RSS-Next-XML-feed-UTF-8/" target="_blank" rel="noopener">Hexo 博客框架添加 RSS 订阅</a>  </li></ul><h2 id="显示阅读量"><a href="#显示阅读量" class="headerlink" title="显示阅读量"></a>显示阅读量</h2><ul><li><a href="https://notes.wanghao.work/2015-10-21-%E4%B8%BANexT%E4%B8%BB%E9%A2%98%E6%B7%BB%E5%8A%A0%E6%96%87%E7%AB%A0%E9%98%85%E8%AF%BB%E9%87%8F%E7%BB%9F%E8%AE%A1%E5%8A%9F%E8%83%BD.html" target="_blank" rel="noopener">为NexT主题添加文章阅读量统计功能</a></li></ul><h2 id="炫酷个性操作"><a href="#炫酷个性操作" class="headerlink" title="炫酷个性操作"></a>炫酷个性操作</h2><ul><li><a href="https://reuixiy.github.io/technology/computer/computer-aided-art/2017/06/09/hexo-next-optimization.html" target="_blank" rel="noopener">打造个性超赞博客Hexo+NexT+GithubPages的超深度优化</a></li><li><a href="http://shenzekun.cn/hexo%E7%9A%84next%E4%B8%BB%E9%A2%98%E4%B8%AA%E6%80%A7%E5%8C%96%E9%85%8D%E7%BD%AE%E6%95%99%E7%A8%8B.html" target="_blank" rel="noopener">hexo的next主题个性化教程:打造炫酷网站</a></li></ul>]]></content:encoded>
      
      <comments>https://evyang1992.github.io/2018/01/15/Hexo-%E5%88%9B%E5%BB%BA%E6%8C%87%E5%8D%97/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Python Numpy 整体架构</title>
      <link>https://evyang1992.github.io/2018/01/15/Python-Numpy-%E6%95%B4%E4%BD%93%E6%9E%B6%E6%9E%84/</link>
      <guid>https://evyang1992.github.io/2018/01/15/Python-Numpy-%E6%95%B4%E4%BD%93%E6%9E%B6%E6%9E%84/</guid>
      <pubDate>Mon, 15 Jan 2018 14:43:32 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;首先什么是Numpy？-能用来做什么？&quot;&gt;&lt;a href=&quot;#首先什么是Numpy？-能用来做什么？&quot; class=&quot;headerlink&quot; title=&quot;首先什么是Numpy？ 能用来做什么？&quot;&gt;&lt;/a&gt;首先什么是Numpy？ 能用来做什么？&lt;/h2&gt;&lt;p&gt;Nu
        
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="首先什么是Numpy？-能用来做什么？"><a href="#首先什么是Numpy？-能用来做什么？" class="headerlink" title="首先什么是Numpy？ 能用来做什么？"></a>首先什么是Numpy？ 能用来做什么？</h2><p>Numpy 是python 的一个第三方包。在拥有Numpy 之后，将numpy 中的ndarray 看作是python 一种数据类型，类似于list 那种，那么就可以知道ndaaray 可以支持切片，索引等操作。实际上它是Python 用来创建数组，进行数组处理分析的标准包，与Scipy 和Matplotlib 联合用来进行科学分析的工具。</p><h2 id="Numpy-的设计架构"><a href="#Numpy-的设计架构" class="headerlink" title="Numpy 的设计架构"></a>Numpy 的设计架构</h2><ul><li>也就是Numpy 设计者赋予了这个包什么样的功能，以及怎么组织设计这个包的。  </li><li><p>Numpy 中的核心就是ndarray 这个Python 对象。用Numpy 第一步就是要将其他的数据对象转成ndarray 对象，转化的过程中你可以指定原始数据中每一个数据的强制转换类型，这就是Numpy 中第二个重点dtype，并且可以结构化数据类型。dtype 创建结构化数组最外面[]包围起来，括起来的内容是每一个元素的形式，一般是[a，a 的数据类型]，如果有2个（或者多个）内容则是[(a, a 的数据类型),(b, b 的数据类型)]，最后表示每个数据为(a, b), 为一个元组。另外要补充说明一个知识点： Python 中很多情况下，列表和元组都可以用，比如numpy 中指定shape。  </p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">创建元组tuple 可以这样创建</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">tup1 = ()</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">但创建只有一个元素的元组时，必须加一个逗号，不加逗号不报错，但无法使用元组各种方法和属性</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">tup1 = (1，)</span></span><br></pre></td></tr></table></figure></li><li><p>创建好了数据，定义好了数据类型，接下来创造了很多帧对数组处理的方法，这些方法能够针对某一问题快速进行数组转换。  </p></li><li>接着创建了基本算术运算方法，位运算方法，以及算术运算函数。  </li><li>然后在统计学习和线性代数上做了一些方法。  </li><li>Numpy 有自己的输入输出方法，Numpy 定义了自己的数据保存专用格式npy，也能直接对text 文本进行输入输出。  </li></ul><h2 id="NumPy-使用"><a href="#NumPy-使用" class="headerlink" title="NumPy 使用"></a>NumPy 使用</h2><ul><li><a href="https://wizardforcel.gitbooks.io/ts-numpy-tut/content/0.html" target="_blank" rel="noopener">一个很棒的numpy 教程</a></li><li><a href="https://docs.scipy.org/doc/numpy-dev/reference/index.html" target="_blank" rel="noopener">官方文档学习</a></li></ul>]]></content:encoded>
      
      <comments>https://evyang1992.github.io/2018/01/15/Python-Numpy-%E6%95%B4%E4%BD%93%E6%9E%B6%E6%9E%84/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Python 迭代器iter 使用</title>
      <link>https://evyang1992.github.io/2018/01/15/Python-%E8%BF%AD%E4%BB%A3%E5%99%A8iter-%E4%BD%BF%E7%94%A8/</link>
      <guid>https://evyang1992.github.io/2018/01/15/Python-%E8%BF%AD%E4%BB%A3%E5%99%A8iter-%E4%BD%BF%E7%94%A8/</guid>
      <pubDate>Mon, 15 Jan 2018 13:50:53 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;首先弄清楚几个概念&quot;&gt;&lt;a href=&quot;#首先弄清楚几个概念&quot; class=&quot;headerlink&quot; title=&quot;首先弄清楚几个概念&quot;&gt;&lt;/a&gt;首先弄清楚几个概念&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;可迭代对象iterable&lt;br&gt;可以进行迭代的对象，python
        
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="首先弄清楚几个概念"><a href="#首先弄清楚几个概念" class="headerlink" title="首先弄清楚几个概念"></a>首先弄清楚几个概念</h2><ul><li><p>可迭代对象iterable<br>可以进行迭代的对象，python 中常见的可迭代对象：list、tuple、dict、set、str等。</p></li><li><p>迭代器iterator<br>Python的Iterator对象表示的是一个数据流，Iterator对象可以被next()函数调用并不断返回下一个数据，直到没有数据时抛出StopIteration错误。可以把这个数据流看做是一个有序序列，但我们却不能提前知道序列的长度，只能不断通过next()函数实现按需计算下一个数据，所以Iterator的计算是惰性的，只有在需要返回下一个数据时它才会计算。<br>Iterator甚至可以表示一个无限大的数据流，例如全体自然数。而使用list是永远不可能存储全体自然数的。<br>所以可迭代对象不是迭代器。</p></li><li><p>迭代iter<br>将可迭代对象变为迭代器的动作。</p></li></ul><h2 id="迭代"><a href="#迭代" class="headerlink" title="迭代"></a>迭代</h2><ul><li><p>如何迭代<br>python 使用内置函数iter 进行迭代  </p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">iter语法为： iter(object[, sentinel])</span></span><br><span class="line"><span class="string">有两种方式使用，第一种很简单，如下</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">list = range(<span class="number">6</span>)</span><br><span class="line">It = iter(list)</span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">第二种，如果传递了第二个参数，则参数 object 必须是一个可调用的对象（如，函数），此时，iter 创建了一个迭代器对象，每次调用这个迭代器对象的__next__()方法时，都会调用 object，直至迭代到元素sentinel。</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="keyword">from</span> queue <span class="keyword">import</span> Queue</span><br><span class="line"></span><br><span class="line">q = Queue()<span class="comment"># 创建队列对象</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">  q.put(i)<span class="comment"># 依次放入5个数字</span></span><br><span class="line">q.put(<span class="string">'END'</span>)<span class="comment"># 放入结束标志</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">()</span>:</span></span><br><span class="line">  <span class="keyword">return</span> q.get()<span class="comment"># 取数据</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> iter(test, <span class="string">'END'</span>):<span class="comment"># 持续执行test()函数，直到返回’END’</span></span><br><span class="line">  print(item, end=<span class="string">' '</span>)</span><br></pre></td></tr></table></figure></li><li><p>如何判断对象为可迭代对象  </p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">使用内置函数isinstance 判断，例如判断列表是否可迭代</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Iterable</span><br><span class="line">isinstance([], Iterable)<span class="comment">## Output: True</span></span><br></pre></td></tr></table></figure></li><li><p>如何判断对象是否为迭代器  </p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">使用内置函数isinstance 判断，例如判断列表是否可迭代</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Iterator</span><br><span class="line">isinstance([], Iterable)<span class="comment">## Output: False</span></span><br></pre></td></tr></table></figure></li><li><p>迭代器执行逻辑<br>迭代器被创建后，就可以使用next 方法进行迭代，直至迭代器所有的元素全部被调用，程序抛出StopIteration 报错。</p></li><li><p>如何使用迭代器</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">主要是next 方法的使用</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="comment"># 首先获得Iterator对象:</span></span><br><span class="line">it = iter([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>])</span><br><span class="line"><span class="comment"># 循环:</span></span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 获得下一个值:</span></span><br><span class="line">        x = next(it)</span><br><span class="line">    <span class="keyword">except</span> StopIteration:</span><br><span class="line">        <span class="comment"># 遇到StopIteration就退出循环</span></span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure></li></ul>]]></content:encoded>
      
      <comments>https://evyang1992.github.io/2018/01/15/Python-%E8%BF%AD%E4%BB%A3%E5%99%A8iter-%E4%BD%BF%E7%94%A8/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Python json 文件处理</title>
      <link>https://evyang1992.github.io/2018/01/15/Python-json-%E6%96%87%E4%BB%B6%E5%A4%84%E7%90%86/</link>
      <guid>https://evyang1992.github.io/2018/01/15/Python-json-%E6%96%87%E4%BB%B6%E5%A4%84%E7%90%86/</guid>
      <pubDate>Mon, 15 Jan 2018 13:44:29 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;关于JSON-的起源和发展&quot;&gt;&lt;a href=&quot;#关于JSON-的起源和发展&quot; class=&quot;headerlink&quot; title=&quot;关于JSON 的起源和发展&quot;&gt;&lt;/a&gt;关于JSON 的起源和发展&lt;/h2&gt;&lt;p&gt;参考：&lt;a href=&quot;https://zh.wik
        
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="关于JSON-的起源和发展"><a href="#关于JSON-的起源和发展" class="headerlink" title="关于JSON 的起源和发展"></a>关于JSON 的起源和发展</h2><p>参考：<a href="https://zh.wikipedia.org/wiki/XML" target="_blank" rel="noopener">JSON</a>  </p><h2 id="XML-学习"><a href="#XML-学习" class="headerlink" title="XML 学习"></a>XML 学习</h2><p>参考：<a href="http://www.w3school.com.cn/json/json_eval.asp" target="_blank" rel="noopener">JSON 学习</a>  </p><h2 id="使用Python-解析JSON-实例"><a href="#使用Python-解析JSON-实例" class="headerlink" title="使用Python 解析JSON 实例"></a>使用Python 解析JSON 实例</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># json 是python 自带的包</span></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">下面演示的是创建一个JSON 数据, 主要函数为dumps 。</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">'name'</span> : <span class="string">'ACME'</span>,</span><br><span class="line">    <span class="string">'shares'</span> : <span class="number">100</span>,</span><br><span class="line">    <span class="string">'price'</span> : <span class="number">542.23</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">json_str = json.dumps(data)</span><br><span class="line"><span class="comment">## Output: '&#123;"first_name": "Guido", "last_name": "Rossum", "titles": ["BDFL", "Developer"]&#125;'</span></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">下面演示的是操纵一个JSON 数据， 主要函数为loads 。</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">json_string = <span class="string">'&#123;"first_name": "Guido", "last_name":"Rossum"&#125;'</span><span class="comment"># 给定的JSON 数据</span></span><br><span class="line">parsed_json = json.loads(json_string)</span><br><span class="line">print(parsed_json[<span class="string">'first_name'</span>])<span class="comment">#在Python 中JSON 数据以字典的形式存在，读取数据改变数据也按照字典的方法来进行  </span></span><br><span class="line"><span class="comment">## Output："Guido"</span></span><br></pre></td></tr></table></figure><p>更详细的解释请参考<a href="https://docs.python.org/2/library/json.html" target="_blank" rel="noopener">Python 官网介绍</a>。  </p>]]></content:encoded>
      
      <comments>https://evyang1992.github.io/2018/01/15/Python-json-%E6%96%87%E4%BB%B6%E5%A4%84%E7%90%86/#disqus_thread</comments>
    </item>
    
    <item>
      <title>深度学习正则项--regularizers</title>
      <link>https://evyang1992.github.io/2018/01/15/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E6%AD%A3%E5%88%99%E9%A1%B9-regularizers/</link>
      <guid>https://evyang1992.github.io/2018/01/15/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E6%AD%A3%E5%88%99%E9%A1%B9-regularizers/</guid>
      <pubDate>Mon, 15 Jan 2018 10:39:37 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;什么是正则项？为什么需要正则项？&quot;&gt;&lt;a href=&quot;#什么是正则项？为什么需要正则项？&quot; class=&quot;headerlink&quot; title=&quot;什么是正则项？为什么需要正则项？&quot;&gt;&lt;/a&gt;什么是正则项？为什么需要正则项？&lt;/h2&gt;&lt;p&gt;应对&lt;strong&gt;过拟合&lt;
        
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="什么是正则项？为什么需要正则项？"><a href="#什么是正则项？为什么需要正则项？" class="headerlink" title="什么是正则项？为什么需要正则项？"></a>什么是正则项？为什么需要正则项？</h2><p>应对<strong>过拟合</strong>问题的在损失函数中添加的一项，原本的损失函数和正则项以其作为新的损失函数。<br>正则项在优化过程中层的参数或层的激活值添加惩罚项，这惩罚项将与损失函数一起作为网络的最终优化目标。惩罚项基于层进行惩罚，目前惩罚项的接口与层有关，但<em>Dense, Conv1D, Conv2D, Conv3D</em>具有共同的接口。<br>请参见：<a href="https://evyang1992.github.io/2018/01/08/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E6%95%B4%E4%BD%93%E6%80%9D%E8%B7%AF%E5%8F%8A%E4%B8%BB%E8%A6%81%E9%97%AE%E9%A2%98%E5%BC%95%E5%87%BA/">深度学习整体思路及主要问题引出</a></p><h2 id="为什么正则化能够降低过拟合"><a href="#为什么正则化能够降低过拟合" class="headerlink" title="为什么正则化能够降低过拟合"></a>为什么正则化能够降低过拟合</h2><ul><li>经验表明正则化的神经网络通常要比未正则化的网络泛化能力更好  </li><li>科学给我们了一个方法， 却没有给出一个合理的解释，如果真的要理解的话是这样的：想象一个线性方程$y=w*x+b$，如果$w$较小，那个对于一个输入$x$ 来说，增加$x$ 输出的影响较小<br>详细请参考：<a href="https://hit-scir.gitbooks.io/neural-networks-and-deep-learning-zh_cn/content/chap3/c3s5ss2.html" target="_blank" rel="noopener">为什么正则化能够降低过拟合</a>  </li></ul><h2 id="深度学习中正则项方法"><a href="#深度学习中正则项方法" class="headerlink" title="深度学习中正则项方法"></a>深度学习中正则项方法</h2><p>一般有以下几种方法：  </p><ul><li>$L1L1$ 正则化</li><li>$L2L2$ 正则化</li><li>$L1L2L1L2$ 正则化</li><li>$DropoutDropout$ 弃权</li></ul><p>L1正则化的效果是尽量将参数变得稀疏，也就是将很多参数都变为0，而L2正则化则是尽量将各个参数都变得平均，L1L2 是以上两种综合表现。<br>假设：  </p><p>$$X=(1,1,2,1)$$</p><p>$$W_1=(0,0,1,0)$$</p><p>$$W_2=(0.4,0.4,0.4,0.4)$$</p><p>显然： </p><p>$$W_1^TX = W2^TX = 2$$</p><p>也就是说，在不加正则项时，两个W的效果一样。我们可以分别计算L1和L2正则项。应用$L1$正则化：</p><p>$$R_{L_1}(W1) = 0 + 0 + 1 + 0 =1$$</p><p>$$R_{L_1}(W2) = 0.4 + 0.4 + 0.4 + 0.4 =1.6$$</p><p>可见应用$L1$正则化，$W1$会有更好的参数。应用$L2$正则化：</p><p>$$R_{L_2}(W1) =00.4^2 + 0^2 + 1^2 + 0^2 =1$$  </p><p>可见应用$L2$ 正则化，$W2$ 会有更好的参数。<br>更详细的介绍请参见：  </p><ul><li><a href="https://hit-scir.gitbooks.io/neural-networks-and-deep-learning-zh_cn/content/chap3/c3s5ss1.html" target="_blank" rel="noopener">正则化</a></li><li><a href="http://shartoo.github.io/regularization-deeplearning/" target="_blank" rel="noopener">深度学习：正则化</a></li><li><a href="https://mp.weixin.qq.com/s?__biz=MzIxMjAzNDY5Mg==&amp;mid=2650790573&amp;idx=1&amp;sn=5440ed10fe842ef40cbd4a98a0abf198&amp;scene=21#wechat_redirect" target="_blank" rel="noopener">其他正则化技术</a>  </li></ul><h2 id="自己动身实现一个正则化过程"><a href="#自己动身实现一个正则化过程" class="headerlink" title="自己动身实现一个正则化过程"></a>自己动身实现一个正则化过程</h2><ul><li><a href="https://zh.gluon.ai/chapter_supervised-learning/reg-scratch.html" target="_blank" rel="noopener">正则化 — 从0开始</a></li></ul><h2 id="正则化方法的Keras-实现"><a href="#正则化方法的Keras-实现" class="headerlink" title="正则化方法的Keras 实现"></a>正则化方法的Keras 实现</h2><ul><li><a href="https://keras-cn.readthedocs.io/en/latest/other/regularizers/" target="_blank" rel="noopener">正则化方法的Keras 实现</a></li></ul><h2 id="正则化底层数学原理"><a href="#正则化底层数学原理" class="headerlink" title="正则化底层数学原理"></a>正则化底层数学原理</h2><ul><li><a href="http://shartoo.github.io/regular-attachment/" target="_blank" rel="noopener">深度学习：参数正则化参考资料</a></li></ul>]]></content:encoded>
      
      <comments>https://evyang1992.github.io/2018/01/15/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E6%AD%A3%E5%88%99%E9%A1%B9-regularizers/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Python logging 使用</title>
      <link>https://evyang1992.github.io/2018/01/15/Python-logging-%E4%BD%BF%E7%94%A8/</link>
      <guid>https://evyang1992.github.io/2018/01/15/Python-logging-%E4%BD%BF%E7%94%A8/</guid>
      <pubDate>Mon, 15 Jan 2018 10:08:35 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;功能介绍&quot;&gt;&lt;a href=&quot;#功能介绍&quot; class=&quot;headerlink&quot; title=&quot;功能介绍&quot;&gt;&lt;/a&gt;功能介绍&lt;/h2&gt;&lt;p&gt;日志的目的：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;诊断日志 记录与应用程序操作相关的日志。例如，用户遇到的报错信息， 可通过搜索诊
        
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="功能介绍"><a href="#功能介绍" class="headerlink" title="功能介绍"></a>功能介绍</h2><p>日志的目的：  </p><ul><li>诊断日志 记录与应用程序操作相关的日志。例如，用户遇到的报错信息， 可通过搜索诊断日志获得上下文信息。</li><li>审计日志 为商业分析而记录的日志。从审计日志中，可提取用户的交易信息， 并结合其他用户资料构成用户报告或者用来优化商业目标。<br>Logging 能做什么？</li><li>可以输出到控制台</li><li>可以写入日志文档  </li></ul><h2 id="基本使用–控制台输出日志"><a href="#基本使用–控制台输出日志" class="headerlink" title="基本使用–控制台输出日志"></a>基本使用–控制台输出日志</h2><p>默认情况下，logging 输出到控制台。<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"></span><br><span class="line">logging.debug(<span class="string">'debug message'</span>)</span><br><span class="line">logging.info(<span class="string">'info message'</span>)</span><br><span class="line">logging.warn(<span class="string">'warn message'</span>)</span><br><span class="line">logging.error(<span class="string">'error message'</span>)</span><br><span class="line">logging.critical(<span class="string">'critical message'</span>)</span><br></pre></td></tr></table></figure></p><p>输出：</p><blockquote><p> WARNING:root:warn message<br>ERROR:root:error message<br>CRITICAL:root:critical message</p></blockquote><p><em>Question：</em><br>为什么’debug message’ 和’info message’ 没有被输出？<br><em>Answer：</em><br>Logging 默认的日志等级为WARNING，只有日志级别高于WARNING 的日志才会被显示。关于日志级别，请继续往下看。</p><h2 id="基本使用–写入日志文档"><a href="#基本使用–写入日志文档" class="headerlink" title="基本使用–写入日志文档"></a>基本使用–写入日志文档</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">通过下面的方式进行简单配置输出方式与日志级别, level 设置日志级别，高于日志级别的就显示  </span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">logging.basicConfig(filename=<span class="string">'logger.log'</span>, level=logging.INFO)</span><br><span class="line"></span><br><span class="line">logging.debug(<span class="string">'debug message'</span>)</span><br><span class="line">logging.info(<span class="string">'info message'</span>)</span><br><span class="line">logging.warn(<span class="string">'warn message'</span>)</span><br><span class="line">logging.error(<span class="string">'error message'</span>)</span><br><span class="line">logging.critical(<span class="string">'critical message'</span>)</span><br></pre></td></tr></table></figure><p>basicConfig关键字参数：</p><table><thead><tr><th>关键字</th><th>描述</th></tr></thead><tbody><tr><td>filename</td><td>创建一个FileHandler，使用指定的文件名，而不是使用StreamHandler。</td></tr><tr><td>filemode</td><td>如果指明了文件名，指明打开文件的模式（如果没有指明filemode，默认为’a’）。</td></tr><tr><td>format</td><td>handler使用指明的格式化字符串。</td></tr><tr><td>datefmt</td><td>使用指明的日期／时间格式。</td></tr><tr><td>level</td><td>指明根logger的级别。</td></tr><tr><td>stream</td><td>使用指明的流来初始化StreamHandler。该参数与’filename’不兼容，如果两个都有，’stream’被忽略。</td></tr></tbody></table><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><ul><li><p>Logger 记录器： 这是我们能对整个对Logging 进行操作的对象。要输出Logging 一定要一个Logger，当然导入logging 之后有一个默认logging 为root logger。默认属性上面做了介绍。</p><blockquote><p> 创建方法： logger = logging.getLogger(logger_name)</p></blockquote></li><li><p>Handler 处理器：Logger 中的属性。设置输出到控制台还是输出日志文档。Handler处理器类型有很多种，比较常用的有三个，StreamHandler，FileHandler，NullHandler。</p><ul><li><p>StreamHandler：输出到控制台  </p><blockquote><p>创建方法: sh = logging.StreamHandler(stream=None)</p></blockquote></li><li><p>FileHandler： 输出到日志文档  </p><blockquote><p>创建方法: fh = logging.FileHandler(filename, mode=’a’, encoding=None, delay=False)  </p></blockquote></li><li><p>NullHandler： 什么都不做”的handler，由库开发者使用。</p></li></ul></li><li><p>Filter 过滤器：logging 属性，可以决定输出哪些日志记录。</p><blockquote><p>创建方法: filter = logging.Filter(name=’’)</p></blockquote></li><li><p>Formatter 格式化器：logging 的属性，设置输出显示成什么样子。</p><blockquote><p>创建方法: formatter = logging.Formatter(fmt=None, datefmt=None)</p></blockquote></li></ul><p>format格式：  </p><table><thead><tr><th>格式</th><th>描述</th></tr></thead><tbody><tr><td>%(levelno)s</td><td>打印日志级别的数值</td></tr><tr><td>%(levelname)s</td><td>打印日志级别名称</td></tr><tr><td>%(pathname)s</td><td>打印当前执行程序的路径</td></tr><tr><td>%(filename)s</td><td>打印当前执行程序名称</td></tr><tr><td>%(funcName)s</td><td>打印日志的当前函数</td></tr><tr><td>%(lineno)d</td><td>打印日志的当前行号</td></tr><tr><td>%(asctime)s</td><td>打印日志的时间</td></tr><tr><td>%(thread)d</td><td>打印线程id</td></tr><tr><td>%(threadName)s</td><td>打印线程名称</td></tr><tr><td>%(process)d</td><td>打印进程ID</td></tr><tr><td>%(message)s</td><td>打印日志信息</td></tr></tbody></table><p>dateformat设置参考：  <a href="https://docs.python.org/2/library/time.html?highlight=strftime#time.strftime" target="_blank" rel="noopener">time.strftime</a>  </p><p>  说明： </p><blockquote><p>Logger可以包含一个或多个Handler和Filter，即Logger与Handler或Fitler是一对多的关系;<br>  一个Logger实例可以新增多个Handler，一个Handler可以新增多个格式化器或多个过滤器，而且日志级别将会继承。</p></blockquote><p>  配置实例：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"></span><br><span class="line"><span class="comment"># create logger</span></span><br><span class="line">logger_name = <span class="string">"example"</span></span><br><span class="line">logger = logging.getLogger(logger_name)</span><br><span class="line">logger.setLevel(logging.DEBUG)</span><br><span class="line"></span><br><span class="line"><span class="comment"># create file handler</span></span><br><span class="line">log_path = <span class="string">"./log.log"</span></span><br><span class="line">fh = logging.FileHandler(log_path)</span><br><span class="line">fh.setLevel(logging.WARN)</span><br><span class="line"></span><br><span class="line"><span class="comment"># create formatter</span></span><br><span class="line">fmt = <span class="string">"%(asctime)-15s %(levelname)s %(filename)s %(lineno)d %(process)d %(message)s"</span></span><br><span class="line">datefmt = <span class="string">"%a %d %b %Y %H:%M:%S"</span></span><br><span class="line">formatter = logging.Formatter(fmt, datefmt)</span><br><span class="line"></span><br><span class="line"><span class="comment"># add handler and formatter to logger</span></span><br><span class="line">fh.setFormatter(formatter)</span><br><span class="line">logger.addHandler(fh)</span><br><span class="line"></span><br><span class="line"><span class="comment"># print log info</span></span><br><span class="line">logger.debug(<span class="string">'debug message'</span>)</span><br><span class="line">logger.info(<span class="string">'info message'</span>)</span><br><span class="line">logger.warn(<span class="string">'warn message'</span>)</span><br><span class="line">logger.error(<span class="string">'error message'</span>)</span><br><span class="line">logger.critical(<span class="string">'critical message'</span>)</span><br></pre></td></tr></table></figure><h2 id="执行架构"><a href="#执行架构" class="headerlink" title="执行架构"></a>执行架构</h2><ol><li>判断日志的等级是否大于Logger对象的等级，如果大于，则往下执行，否则，流程结束。</li><li>产生日志。第一步，判断是否有异常，如果有，则添加异常信息。第二步，处理日志记录方法(如debug，info等)中的占位符，即一般的字符串格式化处理。</li><li>使用注册到Logger对象中的Filters进行过滤。如果有多个过滤器，则依次过滤；只要有一个过滤器返回假，则过滤结束，且该日志信息将丢弃，不再处理，而处理流程也至此结束。否则，处理流程往下执行。</li><li>在当前Logger对象中查找Handlers，如果找不到任何Handler，则往上到该Logger对象的父Logger中查找；如果找到一个或多个Handler，则依次用Handler来处理日志信息。但在每个Handler处理日志信息过程中，会首先判断日志信息的等级是否大于该Handler的等级，如果大于，则往下执行(由Logger对象进入Handler对象中)，否则，处理流程结束。</li><li>执行Handler对象中的filter方法，该方法会依次执行注册到该Handler对象中的Filter。如果有一个Filter判断该日志信息为假，则此后的所有Filter都不再执行，而直接将该日志信息丢弃，处理流程结束。</li><li>使用Formatter类格式化最终的输出结果。 注：Formatter同上述第2步的字符串格式化不同，它会添加额外的信息，比如日志产生的时间，产生日志的源代码所在的源文件的路径等等。</li><li>真正地输出日志信息(到网络，文件，终端，邮件等)。至于输出到哪个目的地，由Handler的种类来决定。</li></ol><h2 id="高级使用"><a href="#高级使用" class="headerlink" title="高级使用"></a>高级使用</h2><p>现在来归纳一下所有的日志配置方法：  </p><ul><li>缺省使用不配置</li><li>通过简单方式进行配置，使用basicConfig()函数直接进行配置；</li><li>显式创建记录器Logger、处理器Handler和格式化器Formatter，并进行相关设置；</li><li>通过配置文件进行配置，使用fileConfig()函数读取配置文件；</li><li>通过配置字典进行配置，使用dictConfig()函数读取配置信息；</li><li>通过网络进行配置，使用listen()函数进行网络配置。</li></ul><p><strong>使用配置文件.ini 进行配置：</strong>  </p><ol><li>首先建立一个ini 文件logging_config.ini：</li></ol><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[loggers]</span></span><br><span class="line"><span class="attr">keys</span>=root</span><br><span class="line"></span><br><span class="line"><span class="section">[handlers]</span></span><br><span class="line"><span class="attr">keys</span>=stream_handler</span><br><span class="line"></span><br><span class="line"><span class="section">[formatters]</span></span><br><span class="line"><span class="attr">keys</span>=formatter</span><br><span class="line"></span><br><span class="line"><span class="section">[logger_root]</span></span><br><span class="line"><span class="attr">level</span>=DEBUG</span><br><span class="line"><span class="attr">handlers</span>=stream_handler</span><br><span class="line"></span><br><span class="line"><span class="section">[handler_stream_handler]</span></span><br><span class="line"><span class="attr">class</span>=StreamHandler</span><br><span class="line"><span class="attr">level</span>=DEBUG</span><br><span class="line"><span class="attr">formatter</span>=formatter</span><br><span class="line"><span class="attr">args</span>=(sys.stderr,)</span><br><span class="line"></span><br><span class="line"><span class="section">[formatter_formatter]</span></span><br><span class="line"><span class="attr">format</span>=%(asctime)s %(name)-<span class="number">12</span>s %(levelname)-<span class="number">8</span>s %(message)s</span><br></pre></td></tr></table></figure><ol><li>然后在源码中调用 logging.config.fileConfig() 方法：  </li></ol><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">from</span> logging.config <span class="keyword">import</span> fileConfig</span><br><span class="line"></span><br><span class="line">fileConfig(<span class="string">'logging_config.ini'</span>)</span><br><span class="line">logger = logging.getLogger()</span><br><span class="line">logger.debug(<span class="string">'often makes a very good meal of %s'</span>, <span class="string">'visiting tourists'</span>)</span><br></pre></td></tr></table></figure><p><strong>通过字典进行配置的例子：</strong><br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">from</span> logging.config <span class="keyword">import</span> dictConfig</span><br><span class="line"></span><br><span class="line">logging_config = dict(</span><br><span class="line">  version = <span class="number">1</span>,</span><br><span class="line">  formatters = &#123;</span><br><span class="line">      <span class="string">'f'</span>: &#123;<span class="string">'format'</span>:</span><br><span class="line">            <span class="string">'%(asctime)s %(name)-12s %(levelname)-8s %(message)s'</span>&#125;</span><br><span class="line">      &#125;,</span><br><span class="line">  handlers = &#123;</span><br><span class="line">      <span class="string">'h'</span>: &#123;<span class="string">'class'</span>: <span class="string">'logging.StreamHandler'</span>,</span><br><span class="line">            <span class="string">'formatter'</span>: <span class="string">'f'</span>,</span><br><span class="line">            <span class="string">'level'</span>: logging.DEBUG&#125;</span><br><span class="line">      &#125;,</span><br><span class="line">  root = &#123;</span><br><span class="line">      <span class="string">'handlers'</span>: [<span class="string">'h'</span>],</span><br><span class="line">      <span class="string">'level'</span>: logging.DEBUG,</span><br><span class="line">      &#125;,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">dictConfig(logging_config)</span><br><span class="line"></span><br><span class="line">logger = logging.getLogger()</span><br><span class="line">logger.debug(<span class="string">'often makes a very good meal of %s'</span>, <span class="string">'visiting tourists'</span>)</span><br></pre></td></tr></table></figure></p>]]></content:encoded>
      
      <comments>https://evyang1992.github.io/2018/01/15/Python-logging-%E4%BD%BF%E7%94%A8/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Python xml 文件处理</title>
      <link>https://evyang1992.github.io/2018/01/10/Python-xml-%E6%96%87%E4%BB%B6%E5%A4%84%E7%90%86/</link>
      <guid>https://evyang1992.github.io/2018/01/10/Python-xml-%E6%96%87%E4%BB%B6%E5%A4%84%E7%90%86/</guid>
      <pubDate>Wed, 10 Jan 2018 08:33:51 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;关于XML-的起源和发展&quot;&gt;&lt;a href=&quot;#关于XML-的起源和发展&quot; class=&quot;headerlink&quot; title=&quot;关于XML 的起源和发展&quot;&gt;&lt;/a&gt;关于XML 的起源和发展&lt;/h2&gt;&lt;p&gt;参考：&lt;a href=&quot;https://zh.wikiped
        
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="关于XML-的起源和发展"><a href="#关于XML-的起源和发展" class="headerlink" title="关于XML 的起源和发展"></a>关于XML 的起源和发展</h2><p>参考：<a href="https://zh.wikipedia.org/wiki/XML" target="_blank" rel="noopener">XML</a></p><h2 id="XML-学习"><a href="#XML-学习" class="headerlink" title="XML 学习"></a>XML 学习</h2><p>参考： <a href="http://www.w3school.com.cn/xml/" target="_blank" rel="noopener">XML 学习</a></p><h2 id="使用Python-ElementTree-解析XML-实例"><a href="#使用Python-ElementTree-解析XML-实例" class="headerlink" title="使用Python ElementTree 解析XML 实例"></a>使用Python ElementTree 解析XML 实例</h2><p>这是一个例子，本文将基于这个xml 文件进行处理</p><pre><code class="xml"><span class="tag">&lt;<span class="name">students</span>&gt;</span>      <span class="tag">&lt;<span class="name">student</span> <span class="attr">no</span>=<span class="string">"2009081097"</span>&gt;</span>          <span class="tag">&lt;<span class="name">name</span> <span class="attr">nickname</span>=<span class="string">"apple"</span>&gt;</span>jack<span class="tag">&lt;/<span class="name">name</span>&gt;</span>          <span class="tag">&lt;<span class="name">gender</span>&gt;</span>M<span class="tag">&lt;/<span class="name">gender</span>&gt;</span>          <span class="tag">&lt;<span class="name">age</span> <span class="attr">updated</span>=<span class="string">"yes"</span>&gt;</span>89<span class="tag">&lt;/<span class="name">age</span>&gt;</span>          <span class="tag">&lt;<span class="name">score</span> <span class="attr">subject</span>=<span class="string">"math"</span>&gt;</span>97<span class="tag">&lt;/<span class="name">score</span>&gt;</span>          <span class="tag">&lt;<span class="name">score</span> <span class="attr">subject</span>=<span class="string">"chinese"</span>&gt;</span>90<span class="tag">&lt;/<span class="name">score</span>&gt;</span>      <span class="tag">&lt;/<span class="name">student</span>&gt;</span>      <span class="tag">&lt;<span class="name">student</span> <span class="attr">no</span>=<span class="string">"2009081098"</span>&gt;</span>          <span class="tag">&lt;<span class="name">name</span> <span class="attr">nickname</span>=<span class="string">"apple"</span>&gt;</span>sunny<span class="tag">&lt;/<span class="name">name</span>&gt;</span>          <span class="tag">&lt;<span class="name">gender</span>&gt;</span>W<span class="tag">&lt;/<span class="name">gender</span>&gt;</span>          <span class="tag">&lt;<span class="name">age</span> <span class="attr">updated</span>=<span class="string">"yes"</span>&gt;</span>90<span class="tag">&lt;/<span class="name">age</span>&gt;</span>          <span class="tag">&lt;<span class="name">score</span> <span class="attr">subject</span>=<span class="string">"math"</span>&gt;</span>87<span class="tag">&lt;/<span class="name">score</span>&gt;</span>          <span class="tag">&lt;<span class="name">score</span> <span class="attr">subject</span>=<span class="string">"chinese"</span>&gt;</span>96<span class="tag">&lt;/<span class="name">score</span>&gt;</span>      <span class="tag">&lt;/<span class="name">student</span>&gt;</span>      <span class="tag">&lt;<span class="name">student</span> <span class="attr">no</span>=<span class="string">"2009081099"</span>&gt;</span>          <span class="tag">&lt;<span class="name">name</span> <span class="attr">nickname</span>=<span class="string">"apple"</span>&gt;</span>Anna<span class="tag">&lt;/<span class="name">name</span>&gt;</span>          <span class="tag">&lt;<span class="name">gender</span>&gt;</span>M<span class="tag">&lt;/<span class="name">gender</span>&gt;</span>          <span class="tag">&lt;<span class="name">age</span> <span class="attr">updated</span>=<span class="string">"yes"</span>&gt;</span>88<span class="tag">&lt;/<span class="name">age</span>&gt;</span>          <span class="tag">&lt;<span class="name">score</span> <span class="attr">subject</span>=<span class="string">"math"</span>&gt;</span>64<span class="tag">&lt;/<span class="name">score</span>&gt;</span>          <span class="tag">&lt;<span class="name">score</span> <span class="attr">subject</span>=<span class="string">"chinese"</span>&gt;</span>98<span class="tag">&lt;/<span class="name">score</span>&gt;</span>      <span class="tag">&lt;/<span class="name">student</span>&gt;</span>  <span class="tag">&lt;/<span class="name">students</span>&gt;</span></code></pre><p>在做处理之前，要清楚xml 文件基本要处理的内容是下面的几个：  </p><ul><li>节点： <name nickname="apple">jack</name>  就是一个节点，根节点就是最外面那个节点，比如这里的<students>。  </students></li><li>属性：nickname 是元素的属性attrib。获取用get, 设定用set。</li><li>文本内容：jack 是元素的text。读内容用.text。  </li></ul><p>接下来用代码来解释相关的操作：  </p><pre><code class="py"><span class="string">'''</span><span class="string">ElementTree 生来就是为了处理 XML ，它在 Python 标准库中有两种实现。一种是纯 Python 实现例如 xml.etree.ElementTree ，另外一种是速度快一点的 xml.etree.cElementTree 。你要记住： 尽量使用 C 语言实现的那种，因为它速度更快，而且消耗的内存更少。</span><span class="string">一般使用下面的代码来导入。  </span><span class="string">'''</span><span class="keyword">try</span>:  <span class="keyword">import</span> xml.etree.cElementTree <span class="keyword">as</span> et<span class="keyword">except</span> ImportError:  <span class="keyword">import</span> xml.etree.ElementTree <span class="keyword">as</span> et<span class="comment"># 解析文件  </span>parser = et.parse(<span class="string">"data.xml"</span>)<span class="comment"># 获取根节点  </span>root = parser.getroot()<span class="comment"># 获取标签名字  </span>print(root.tag)<span class="comment"># 获取属性  </span>attr = root.attrib<span class="comment"># 通过索引访问节点  </span>print(root[<span class="number">0</span>][<span class="number">0</span>].text)<span class="comment"># 查找根目录下面的子元素  </span><span class="keyword">for</span> name <span class="keyword">in</span> root.findall(<span class="string">"student"</span>):    <span class="comment"># 查找一个具体的元素  </span>  print(name.find(<span class="string">"age"</span>).get(<span class="string">"updated"</span>))  <span class="comment">#获取属性  </span>  print(name.get(<span class="string">"no"</span>))<span class="comment">#获取student元素  </span><span class="comment">#更改student.age年龄  </span><span class="comment">#获取name设置属性  </span><span class="comment">#写入文档  </span><span class="keyword">for</span> child <span class="keyword">in</span> root.iter(<span class="string">"student"</span>):    new_age = int(child.find(<span class="string">"age"</span>).text)+<span class="number">10</span>  child.find(<span class="string">"age"</span>).text = str(new_age)  child.find(<span class="string">"name"</span>).set(<span class="string">"nickname"</span>,<span class="string">"apple"</span>)parser.write(<span class="string">"data.xml"</span>)<span class="comment">#查找根目录下面的子元素  </span><span class="comment">#查找age  </span><span class="comment">#如果大于age删除元素  </span><span class="comment">#写入文档  </span><span class="keyword">for</span> offspring <span class="keyword">in</span> root.findall(<span class="string">"student"</span>):    age = int(offspring.find(<span class="string">"age"</span>).text)  <span class="keyword">if</span>(age &gt; <span class="number">60</span>):      root.remove(offspring)parser.write(<span class="string">"data.xml"</span>)<span class="comment">#创建元素  </span>father = et.Element(<span class="string">"father"</span>)father.text = <span class="string">"Jason"</span>son = et.SubElement(father,<span class="string">"son"</span>) son.text = <span class="string">"Lan"</span>  daughter=et.SubElement(father,<span class="string">"daughter"</span>) daughter.text = <span class="string">"sunny"</span>    print(et.dump(father)) exit()<span class="comment">#迭代属性  </span><span class="keyword">for</span> child <span class="keyword">in</span> root:    print((<span class="string">"iterator node name is {} , attr is {}"</span>).format)(child.tag,child.attrib) <span class="keyword">for</span> student <span class="keyword">in</span> root.findall(<span class="string">'student'</span>):    id = student.get(<span class="string">"no"</span>)   name = student.find(<span class="string">"name"</span>).text    print(id,name)  <span class="keyword">for</span> age <span class="keyword">in</span> root.iter(<span class="string">'age'</span>):   new_age = int(age.text)+<span class="number">1</span>    age.text = str(new_age)  age.set(<span class="string">'updated'</span>,<span class="string">'yes'</span>)  <span class="comment">#写入文件 用什么编码 是否要申明头部文件  </span>parser.write(<span class="string">"data.xml"</span>,encoding=<span class="string">"utf-8"</span>,xml_declaration=<span class="keyword">True</span>)<span class="keyword">for</span> name <span class="keyword">in</span> root.iter(<span class="string">"student"</span>):    <span class="comment">#print name.tag</span>  print(name.attrib[<span class="string">"no"</span>])</code></pre>]]></content:encoded>
      
      <comments>https://evyang1992.github.io/2018/01/10/Python-xml-%E6%96%87%E4%BB%B6%E5%A4%84%E7%90%86/#disqus_thread</comments>
    </item>
    
    <item>
      <title>深度学习整体思路及主要问题引出</title>
      <link>https://evyang1992.github.io/2018/01/09/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E6%95%B4%E4%BD%93%E6%80%9D%E8%B7%AF%E5%8F%8A%E4%B8%BB%E8%A6%81%E9%97%AE%E9%A2%98%E5%BC%95%E5%87%BA/</link>
      <guid>https://evyang1992.github.io/2018/01/09/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E6%95%B4%E4%BD%93%E6%80%9D%E8%B7%AF%E5%8F%8A%E4%B8%BB%E8%A6%81%E9%97%AE%E9%A2%98%E5%BC%95%E5%87%BA/</guid>
      <pubDate>Tue, 09 Jan 2018 11:15:00 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;回到深度学习网络层上面，我们有一个数据集$X$ 输入，经过很多层网络层（每一层网络层有很多参数），得到计算结果$Y$ 。一个完整的全连接层Fully connected layer 如下：&lt;br&gt;&lt;img src=&quot;https://github.com/EVYang1992
        
      
      </description>
      
      <content:encoded><![CDATA[<p>回到深度学习网络层上面，我们有一个数据集$X$ 输入，经过很多层网络层（每一层网络层有很多参数），得到计算结果$Y$ 。一个完整的全连接层Fully connected layer 如下：<br><img src="https://github.com/EVYang1992/EVYang1992.github.io/blob/master/2018/01/09/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E6%95%B4%E4%BD%93%E6%80%9D%E8%B7%AF%E5%8F%8A%E4%B8%BB%E8%A6%81%E9%97%AE%E9%A2%98%E5%BC%95%E5%87%BA/1.PNG" alt="1"></p><p>从图上来看，如何评估输出$Y$ 是我们所需的结果，我们自然想到了目标函数（损失函数）。将训练得到的$Y$ 与我们事先标注的想要的$Y’$ 利用损失函数进行计算，就可以保证输出$Y$ 是一个目标值。 关于损失函数，请参见这里。<br>也就是输入$X$经过一堆参数$\theta_1$,$\theta_2$,$\theta_3$··· 的影响得到输出$Y$ , 即:</p><p>$$Y=F(X,θ)$$</p><p>然后利用损失函数计算$Y$ 和$Y’$ ：  </p><p>$$A=L(Y,Y’)$$</p><p>接下来的目标是什么呢？调整$θ$ 值损失函数得到的结果$A$ 最小。<br>我们计算每一个$θ$ 对$A$ 的影响。即求偏导数：  </p><p>$$d(A)/d(\theta)$$</p><p>$\theta$ 自调整采用梯度下降的方式：  </p><p>$$\theta = \theta - \eta*\frac{d(A)}{d(\theta)}$$<br><img src="https://github.com/EVYang1992/EVYang1992.github.io/blob/master/2018/01/09/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E6%95%B4%E4%BD%93%E6%80%9D%E8%B7%AF%E5%8F%8A%E4%B8%BB%E8%A6%81%E9%97%AE%E9%A2%98%E5%BC%95%E5%87%BA/1.PNG" alt="2">  </p><p>$\eta$ 称之为学习率learning rate。<br>求一个函数的极值点，那就是求一阶梯度为零的时候的函数值。那问题到现在就成了找到合适的参数值，使得：  </p><p>$$\frac{d(A)}{d(\theta)} = 0$$  </p><p>这好比你在一座大山里想走到大山最低处，你对四面八方的地势进行判断，哪边最陡从哪边前进一点点（求梯度），直到走到某个点，这个点四面八方都是平地（此时梯度为零）。  </p><p>当然你会有一些疑问：  </p><ul><li>为什么极值为零的点是最低点，不是最高点？<br>先看图：<br><img src="https://github.com/EVYang1992/EVYang1992.github.io/blob/master/2018/01/09/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E6%95%B4%E4%BD%93%E6%80%9D%E8%B7%AF%E5%8F%8A%E4%B8%BB%E8%A6%81%E9%97%AE%E9%A2%98%E5%BC%95%E5%87%BA/1.PNG" alt="3"></li></ul><p>你会发现，通过：  </p><p>$$\theta = \theta - \eta*\frac{d(A)}{d(\theta)}$$ </p><p>计算$\theta$ （这里$\theta = \eta$ ）时候，如果梯度$d(A)/d(\theta)$ 是正值，也就是在上坡的时候，那么计算后的$\theta$ 变小，也就是在往坡下走。相反，若 梯度$d(A)/d(\theta)$ 是负值，那$\theta$ 变大，也在往坡下走。可以知道，这个操作都是使得纵轴的损失函数LL 变小。</p><ul><li><p>我们的目标是走到整座大山的最低点，而梯度为零不一定是全局最低，有可能是局部最低点, 直观点就像上图，只走到了红色部分。  </p></li><li><p>进行梯度计算，诞生了反向传播算法Backpropagation。</p></li><li><p>为了尽快到达最低点，你要告诉它该怎么走。</p></li></ul>]]></content:encoded>
      
      <comments>https://evyang1992.github.io/2018/01/09/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E6%95%B4%E4%BD%93%E6%80%9D%E8%B7%AF%E5%8F%8A%E4%B8%BB%E8%A6%81%E9%97%AE%E9%A2%98%E5%BC%95%E5%87%BA/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
